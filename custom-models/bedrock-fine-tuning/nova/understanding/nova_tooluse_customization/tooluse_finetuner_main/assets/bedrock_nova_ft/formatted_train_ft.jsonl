{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a new directory named 'project' one level below the current folder</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['mkdir ../project']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Remove all .txt files in the current directory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['rm *.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the first 10 lines of log.txt</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['head -n 10 log.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all Python files in the current directory and subdirectories</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find . -name \"*.py\"']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Change permissions of script.sh to be executable</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['chmod +x script.sh']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I need system uptime</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['uptime']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a symbolic link named 'latest' pointing to 'data.txt'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['ln -s data.txt latest']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Compress folder 'docs' into a tar archive</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['tar -czvf docs.tar.gz docs']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display disk usage in human-readable format</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['df -h']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Search for the word 'error' in all log files</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['grep \"error\" *.log']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Kill process with ID 1234</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['kill 1234']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display current network connections</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['netstat -an']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Set an environment variable NAME to 'John'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['export NAME=John']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the contents of a file named 'data.csv' using less</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['less data.csv']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find the largest files in the current directory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['du -sh * | sort -rh | head -n 5']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Rename all .jpeg files to .jpg</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['rename \"s/.jpeg/.jpg/\" *.jpeg']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display system date and time</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['date']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Count the number of lines in file.txt</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['wc -l file.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all files larger than 1 gigabyte.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find ~/ -type f -size +1G']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a backup of important.txt</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['cp important.txt important.txt.bak']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the last 20 lines of a log file</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['tail -n 20 app.log']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all empty directories in the current path</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find . -type d -empty']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display current user's crontab</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['crontab -l']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Change ownership of file.txt to user 'admin'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['chown admin file.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display system memory usage</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['free -m']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a file named 'test.txt' with content 'Hello'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['echo \"Hello\" > test.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all files modified in the last 24 hours</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find . -mtime -1']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display current working directory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['pwd']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all installed packages using pip</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['pip list']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the content of .bashrc file</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['cat ~/.bashrc']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Check the status of service 'nginx'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['systemctl status nginx']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display system load average</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['w']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a tar archive of folder 'project'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['tar -cvf project.tar project']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display all environment variables</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['env']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find files larger than 100MB</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find . -type f -size +100M']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display IP address information</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['ip addr show']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a new user named 'testuser'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['useradd testuser']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the SHA256 checksum of file.txt</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['sha256sum file.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Set file permissions to read and write for owner only</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['chmod 600 secret.key']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display running processes for current user</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['ps -u $USER']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find duplicate files in the current directory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['fdupes .']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the routing table</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['route -n']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a 1GB test file</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['dd if=/dev/zero of=test.file bs=1M count=1024']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me the calendar for the current month</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['cal']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Check disk space usage of directory 'logs'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['du -sh logs']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display listening ports</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['netstat -tuln']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Set the system hostname to 'webserver'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['hostnamectl set-hostname webserver']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the manual page for ls command</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['man ls']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Please create a zip archive of all .jpg files</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['zip images.zip *.jpg']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create an anaconda environment with Python 3.12</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['conda create -n py312 python=3.12']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How can I view the contents of a file without opening it?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['cat filename.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the command to ping google.com 5 times?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['ping -c 5 google.com']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create an empty file</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['touch newfile.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How can I create a file with specific content?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['echo \"Hello, World!\" > greeting.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Check the MD5 sum of a file.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['md5sum filename.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I need the total number of lines in script.py.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['wc -l script.py']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the command to see the last 100 lines of myfile.log?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['tail -n 100 myfile.log']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>See all running Docker containers.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['docker ps']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I need to know my user ID. What should I type?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['id']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How do I find all files owned by user 'john'?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find / -user john']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the command to see the full path of the 'python' command?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['which python']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How do I check the size of a directory named data?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['du -sh data']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the command to update all packages on Ubuntu?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['sudo apt update && sudo apt upgrade']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the syntax to run a bash shell in a running Docker container named 'webserver'?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['docker exec -it webserver /bin/bash']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me the command to build a Docker image from a Dockerfile in the current directory and tag it 'myapp:v1'?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['docker build -t myapp:v1 .']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How do I create a tar archive of /home/user, excluding hidden files?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['tar --exclude=\".*\" -czvf user_backup.tar.gz /home/user']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How can I display the current I/O statistics for all devices?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['iostat']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How can I list all Docker images, including intermediate ones?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['docker images -a']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the first and last 5 lines of a requirements.txt file</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['(head -n 5; tail -n 5) < requirements.txt']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Push a Docker image named 'myapp:latest' to Docker Hub</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['docker push myapp:latest']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the syntax to display the last 20 commands executed by the current user?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['history 20']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I need the command to list all running processes and their CPU/memory usage?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['top']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the differences between two directories, one named streamlit and one named data one file level above?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['diff -r streamlit ../data']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the syntax to find all Python files containing the word 'TODO' in the comments?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['grep -r \"# TODO\" --include=\"*.py\" .']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Provide the command to display the current Linux kernel version.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['uname -r']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a 100MB file filled with random data</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['dd if=/dev/urandom of=random_file bs=1M count=100']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the syntax to find all files larger than 100MB and list them by size?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find . -type f -size +100M -exec ls -lh {} + | sort -k5 -rh']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the command to remove all stopped Docker containers?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['docker container prune']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me the ommand to rename all .txt files to .bak in the current directory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['for file in *.txt; do mv \"$file\" \"${file%.txt}.bak\"; done']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How do I compress all .jpg files in the current directory individually?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['for file in *.jpg; do gzip \"$file\"; done']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Leonardo da Vinci?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Leonardo da Vinci'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain photosynthesis</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'photosynthesis'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who wrote 'To Kill a Mockingbird'?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'To Kill a Mockingbird author'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the Great Wall of China</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Great Wall of China'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to know about Albert Einstein</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Albert Einstein'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is climate change?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'climate change'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me information on William Shakespeare</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'William Shakespeare'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Describe the theory of evolution</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'theory of evolution'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Marie Curie?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Marie Curie'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the Pythagorean theorem</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Pythagorean theorem'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about Mahatma Gandhi</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Mahatma Gandhi'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What was the Industrial Revolution?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Industrial Revolution'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to learn about Nelson Mandela</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Nelson Mandela'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Describe the Big Bang theory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Big Bang theory'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Christopher Columbus?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Christopher Columbus'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain democracy</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'democracy'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about Martin Luther King Jr.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Martin Luther King Jr.'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is quantum mechanics?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'quantum mechanics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to know about Vincent van Gogh</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Vincent van Gogh'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Describe the French Revolution</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'French Revolution'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Isaac Newton?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Isaac Newton'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain global warming</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'global warming'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about Ludwig van Beethoven</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Ludwig van Beethoven'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is artificial intelligence?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'artificial intelligence'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to learn about Charles Darwin</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Charles Darwin'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Describe the Cold War</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Cold War'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Galileo Galilei?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Galileo Galilei'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What was the Enlightenment?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Enlightenment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about Wolfgang Amadeus Mozart</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Wolfgang Amadeus Mozart'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the Internet</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Internet'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to know about Pablo Picasso</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Pablo Picasso'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Describe the American Civil War</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'American Civil War'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Sigmund Freud?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Sigmund Freud'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What was the Renaissance?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Renaissance'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about Thomas Edison</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Thomas Edison'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain communism</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'communism'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to learn about Florence Nightingale</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Florence Nightingale'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What was the Reformation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Reformation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Alexander the Great?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Alexander the Great'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Describe the Magna Carta</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Magna Carta'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about Joan of Arc</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Joan of Arc'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the Periodic Table?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Periodic Table'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to know about Winston Churchill</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Winston Churchill'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain socialism</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'socialism'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Nikola Tesla?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Nikola Tesla'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the United Nations?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'United Nations'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about Cleopatra</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Cleopatra'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Describe the Industrial Revolution</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Industrial Revolution'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to learn about Abraham Lincoln</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Abraham Lincoln'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What can you tell me about the Roman Empire?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Roman Empire'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me information on the Apollo 11 mission</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Apollo 11 mission'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the history of jazz music</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of jazz music'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you explain the concept of supply and demand?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'supply and demand'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the life of Harriet Tubman</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Harriet Tubman'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the history of the Olympic Games?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of Olympic Games'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to learn about the Taj Mahal</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Taj Mahal'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the process of photosynthesis</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'process of photosynthesis'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Catherine the Great?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Catherine the Great'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the history of the automobile</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of automobile'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the significance of the Rosetta Stone?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Rosetta Stone significance'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know more about the Spanish Inquisition</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Spanish Inquisition'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the concept of black holes</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'black holes'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Genghis Khan?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Genghis Khan'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the history of the internet</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of the internet'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What was the significance of the Silk Road?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Silk Road significance'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to learn about the Wright brothers</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Wright brothers'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the concept of plate tectonics</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'plate tectonics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Queen Victoria?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Queen Victoria'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the history of cinema</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of cinema'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the significance of the Mona Lisa?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Mona Lisa significance'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know more about the Cuban Missile Crisis</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Cuban Missile Crisis'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the concept of relativity</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'relativity'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Frida Kahlo?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Frida Kahlo'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the history of aviation</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of aviation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What was the significance of the Gutenberg Press?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Gutenberg Press significance'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to learn about the Pyramids of Giza</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Pyramids of Giza'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the concept of natural selection</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'natural selection'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you explain the concept of quantum entanglement?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'quantum entanglement'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the history of ancient Egypt</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'ancient Egypt history'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What can you tell me about the invention of the telephone?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'invention of telephone'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find YouTube videos on underwater photography techniques?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'underwater photography techniques'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in learning about ancient Roman architecture. What videos are available?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'ancient Roman architecture'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me some YouTube content related to urban gardening, please.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'urban gardening'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What kind of videos can I find about artificial intelligence ethics?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'artificial intelligence ethics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to watch some videos on traditional Japanese tea ceremonies. Can you help?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'Japanese tea ceremony'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good YouTube tutorials on calligraphy for beginners?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'calligraphy for beginners'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you find me some videos about the history of cryptography?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of cryptography'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What YouTube content is available on sustainable fashion?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'sustainable fashion'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to learn about cognitive behavioral therapy. Can you find relevant videos?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'cognitive behavioral therapy'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any interesting YouTube videos on the art of bonsai?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'art of bonsai'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find me some videos explaining the basics of quantum computing, please.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'quantum computing basics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What kind of content can I find on YouTube about minimalist lifestyle?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'minimalist lifestyle'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about beekeeping. Can you search for related videos?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'beekeeping for beginners'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good YouTube tutorials on origami techniques?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'origami techniques'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find me some videos about the psychology of color?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'psychology of color'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to watch content related to urban exploration. What's available on YouTube?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'urban exploration'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any informative videos about the history of animation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of animation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find YouTube tutorials on latte art?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'latte art tutorials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What kind of videos are there about renewable energy for homes?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'renewable energy for homes'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to learn about stoic philosophy. Can you find relevant YouTube content?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'stoic philosophy'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good videos explaining the basics of blockchain technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'blockchain technology basics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you search for YouTube videos about traditional folk dances from around the world?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'traditional folk dances world'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in learning about hydroponics. What videos can you find?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'hydroponics for beginners'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any informative YouTube videos on the history of internet?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of internet'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find me some videos about the art of negotiation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'art of negotiation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What kind of YouTube content is available on wilderness survival skills?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'wilderness survival skills'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to watch videos about the psychology of marketing. Can you help?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'psychology of marketing'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good YouTube tutorials on basic car maintenance?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'basic car maintenance tutorials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find videos explaining the concept of circular economy?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'circular economy explained'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the history of board games. What videos are available on YouTube?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of board games'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find videos about space exploration?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'space exploration'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm looking for visual tutorials on digital painting. Any suggestions?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'digital painting tutorials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Where can I find lectures on quantum physics?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'quantum physics lectures'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you search for vegan recipe videos?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'vegan recipes'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to watch videos about ancient Egyptian history. Can you help?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'ancient Egyptian history'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are some popular travel vlogs I can watch?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'travel vlogs'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Do you have any guitar lesson videos for beginners?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'guitar lessons for beginners'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in documentaries about climate change. Can you find some?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'climate change documentaries'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good videos on machine learning algorithms?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'machine learning algorithms'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you show me some popular TikTok dance tutorials?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'TikTok dance tutorials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to watch interviews with famous scientists. Can you find some?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'scientist interviews'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Where can I find yoga classes for beginners?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'yoga for beginners'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you search for videos about the history of jazz music?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of jazz music'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm looking for tutorials on 3D modeling. Any recommendations?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': '3D modeling tutorials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find videos discussing renewable energy technologies?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'renewable energy technologies'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to learn Spanish. Can you find language learning videos?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'learn Spanish'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good videos about modern art movements?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'modern art movements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are some popular science experiment videos I can watch?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'science experiments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you suggest videos on mindfulness meditation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'mindfulness meditation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm looking for DIY home improvement tutorials. Any ideas?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'DIY home improvement'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What videos are available about the latest tech gadgets?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'latest tech gadgets'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you recommend some popular workout routines?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'workout routines'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to watch some book review videos. Can you find any?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'book reviews'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there makeup tutorials suitable for beginners?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'makeup tutorials for beginners'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you search for videos about cryptocurrency and blockchain?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'cryptocurrency blockchain'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm in the mood for movie trailers. Can you find some compilations?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'movie trailer compilations'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What videos are available on sustainable living practices?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'sustainable living'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Do you have any photography tips and tricks videos?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'photography tips and tricks'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find videos that cover the history of video games?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of video games'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are some popular car review videos I can watch?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'car reviews'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm looking for videos on public speaking techniques. Any suggestions?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'public speaking techniques'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you recommend some good nature documentaries?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'nature documentaries'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any helpful videos about personal finance management?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'personal finance management'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to see some popular podcast highlights. Can you find any?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'podcast highlights'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Do you have any videos with creative writing tips?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'creative writing tips'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find astronomy and stargazing guides for me?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'astronomy stargazing guides'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in the history of fashion. Any video recommendations?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of fashion'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are some popular gardening tutorials I can watch?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'gardening tutorials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find videos about cybersecurity best practices?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'cybersecurity best practices'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to watch animal behavior documentaries. Any suggestions?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'animal behavior documentaries'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good videos on philosophy and ethics?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'philosophy and ethics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you show me some popular magic trick tutorials?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'magic trick tutorials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm looking for videos on time management strategies. Any ideas?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'time management strategies'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you find some classical music performances for me to watch?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'classical music performances'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any videos about the history of architecture?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of architecture'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you recommend some popular short film compilations?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'short film compilations'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I need videos on social media marketing strategies. Can you help?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'social media marketing strategies'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Where can I find foreign language movie trailers?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'foreign language movie trailers'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Do you have any videos about the latest medical breakthroughs?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'latest medical breakthroughs'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me music videos.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'music videos'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on the benefits of probiotics?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'probiotics benefits'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find studies about the effectiveness of cognitive behavioral therapy?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'cognitive behavioral therapy effectiveness'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in articles discussing the link between diet and heart disease. Can you help?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'diet heart disease link'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any studies on how exercise impacts mental health?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'exercise impact mental health'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you search for research related to the genetics of autism?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'autism genetics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What do articles say about the effects of sleep deprivation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'sleep deprivation effects'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I need information on the use of stem cells in regenerative medicine. Can you find some studies?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'stem cells regenerative medicine'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on the gut-brain connection?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'gut brain connection'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How effective is acupuncture for pain management according to recent articles?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'acupuncture pain management effectiveness'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find studies about vitamin D's role in immune function?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'vitamin D immune function'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research has been done on air pollution's effects on respiratory health?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'air pollution respiratory health effects'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there articles discussing the use of immunotherapy in cancer treatment?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'immunotherapy cancer treatment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How does social media impact mental health? Can you find relevant studies?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'social media impact mental health'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know about the effectiveness of mindfulness meditation. Any research available?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'mindfulness meditation effectiveness'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What genetic factors are associated with type 2 diabetes? Can you find articles on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'type 2 diabetes genetic factors'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there studies on how caffeine affects cognitive performance?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'caffeine effects cognitive performance'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you find research on using virtual reality for pain management?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'virtual reality pain management'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What do articles say about the connection between stress and cardiovascular disease?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'stress cardiovascular disease link'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Is cognitive training effective for preventing dementia? Can you find studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'cognitive training dementia prevention'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on using CRISPR gene editing to treat genetic disorders?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'CRISPR gene editing genetic disorders'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How does screen time affect child development? Are there articles about this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'screen time impact child development'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find studies on the effectiveness of ketogenic diets for managing epilepsy?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'ketogenic diet epilepsy management'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on using machine learning in medical diagnosis?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'machine learning medical diagnosis'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there articles discussing the role of gut microbiota in obesity?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'gut microbiota obesity role'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How effective is music therapy for reducing anxiety? Can you find studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'music therapy anxiety reduction'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on the use of telemedicine in rural healthcare settings?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'telemedicine rural healthcare'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles about how climate change impacts infectious diseases?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'climate change impact infectious diseases'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are cognitive enhancers effective in healthy individuals? What do studies say?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'cognitive enhancers effectiveness healthy individuals'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on using nanotechnology for drug delivery?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'nanotechnology drug delivery'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find articles about the role of inflammation in neurodegenerative diseases</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'inflammation role neurodegenerative diseases'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How does intermittent fasting affect metabolic health? Are there studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'intermittent fasting metabolic health effects'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on using 3D printing in prosthetics?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': '3D printing prosthetics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles about how air pollution impacts fetal development?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'air pollution impact fetal development'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How effective is mindfulness-based stress reduction? What do studies say?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'mindfulness-based stress reduction effectiveness'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on using biomarkers for early cancer detection?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'biomarkers early cancer detection'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles discussing the role of epigenetics in aging?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'epigenetics role aging'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Does blue light exposure affect sleep quality? Are there studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'blue light exposure sleep quality effects'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on the use of robotics in surgery?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'robotics surgery'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles about how social isolation impacts cognitive decline in older adults?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'social isolation impact cognitive decline older adults'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How effective is transcranial magnetic stimulation for depression? What do studies say?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'transcranial magnetic stimulation depression effectiveness'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on using organoids for drug testing?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'organoids drug testing'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles discussing the role of circadian rhythms in metabolic disorders?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'circadian rhythms role metabolic disorders'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Does moderate alcohol consumption affect cardiovascular health? Are there studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'moderate alcohol consumption cardiovascular health effects'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on using wearable technology for healthcare monitoring?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'wearable technology healthcare monitoring'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles about how childhood trauma impacts adult mental health?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'childhood trauma impact adult mental health'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How effective are probiotics for treating irritable bowel syndrome? What do studies say?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'probiotics effectiveness irritable bowel syndrome'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on using deep learning for medical imaging analysis?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'deep learning medical imaging analysis'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles discussing the role of telomeres in cellular aging?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'telomeres role cellular aging'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How does meditation affect brain structure? Are there studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'meditation effects brain structure'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on using gene therapy to treat inherited disorders?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'gene therapy inherited disorders'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the impact of fasting on longevity. Any studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'fasting impact longevity'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What does the research say about the effects of meditation on chronic pain?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'meditation effects chronic pain'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any studies examining the link between gut health and depression?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'gut health depression link'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles on the potential of personalized medicine in cancer treatment?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'personalized medicine cancer treatment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know more about the effects of high-intensity interval training. Any research available?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'high-intensity interval training effects'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What studies exist on the use of artificial intelligence in drug discovery?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'artificial intelligence drug discovery'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you search for articles about the impact of sugar consumption on cognitive function?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'sugar consumption impact cognitive function'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any recent studies on the effectiveness of vaccines against emerging viral strains?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'vaccine effectiveness emerging viral strains'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on the use of virtual reality in physical rehabilitation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'virtual reality physical rehabilitation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles discussing the potential of CRISPR technology in treating genetic diseases?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'CRISPR technology genetic diseases treatment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in the effects of chronic stress on the immune system. Any studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'chronic stress effects immune system'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What does research say about the impact of social media use on adolescent mental health?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'social media impact adolescent mental health'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there studies examining the effectiveness of cognitive training in preventing cognitive decline?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'cognitive training effectiveness preventing cognitive decline'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles on the potential of stem cell therapy in treating neurodegenerative diseases?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'stem cell therapy neurodegenerative diseases'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on the use of cannabinoids for pain management?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'cannabinoids pain management'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know more about the effects of intermittent fasting on insulin sensitivity. Any studies?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'intermittent fasting effects insulin sensitivity'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any recent articles on the use of immunotherapy in treating autoimmune diseases?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'immunotherapy autoimmune diseases treatment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find studies on the impact of air pollution on cardiovascular health?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'air pollution impact cardiovascular health'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on the use of probiotics in treating gastrointestinal disorders?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'probiotics gastrointestinal disorders treatment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the effects of sleep deprivation on cognitive performance. Any studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'sleep deprivation effects cognitive performance'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there articles discussing the potential of nanotechnology in targeted drug delivery?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'nanotechnology targeted drug delivery'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What does research say about the effectiveness of mindfulness-based interventions for anxiety disorders?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'mindfulness-based interventions effectiveness anxiety disorders'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find studies on the impact of exercise on brain plasticity?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'exercise impact brain plasticity'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know more about the role of gut microbiota in autoimmune diseases. Any research available?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'gut microbiota role autoimmune diseases'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any recent articles on the use of gene editing in treating genetic disorders?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'gene editing genetic disorders treatment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What studies exist on the effectiveness of cognitive behavioral therapy for insomnia?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'cognitive behavioral therapy effectiveness insomnia'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find research on the potential of artificial intelligence in early disease detection?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'artificial intelligence early disease detection'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in the effects of meditation on brain structure and function. Any studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'meditation effects brain structure function'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What does research say about the impact of dietary patterns on cardiovascular health?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'dietary patterns impact cardiovascular health'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there studies examining the effectiveness of virtual reality therapy for phobias?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'virtual reality therapy effectiveness phobias'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you provide an update on the Israel-Hamas conflict?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Israel-Hamas conflict latest news'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who's leading the race for the 2024 US presidential election?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': '2024 US presidential election frontrunners'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's happening in the Ukraine-Russia war right now?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Ukraine-Russia war current situation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the most recent AI breakthroughs.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest AI breakthroughs'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How high is inflation in the US currently?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current US inflation rate'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What do the newest climate change reports indicate?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent climate change reports'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was awarded the most recent Nobel Peace Prize?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest Nobel Peace Prize winner'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which COVID-19 variants are scientists currently worried about?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current COVID-19 variants of concern'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How are the Brexit negotiations progressing?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Brexit negotiations current status'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's new in space exploration?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest space exploration news'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you list the current top tennis players?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current top-ranked tennis players'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What progress has been made recently in renewable energy?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent renewable energy advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the global chip shortage affecting industries?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global chip shortage current situation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the latest on Hong Kong's pro-democracy movement?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Hong Kong pro-democracy movement latest news'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How much of the Amazon rainforest has been lost recently?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Amazon deforestation current state'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Have there been any exciting exoplanet discoveries lately?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest exoplanet discoveries'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the status of the global minimum corporate tax agreement?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global minimum corporate tax agreement latest'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the cryptocurrency market behaving currently?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current cryptocurrency trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Where do things stand with the Iran nuclear deal?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Iran nuclear deal current status'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are the newest developments in self-driving car technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest autonomous vehicle technology'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which countries are leading in 5G technology right now?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current world leaders in 5G technology'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How are global supply chain issues being addressed?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global supply chain issues latest news'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What breakthroughs have occurred recently in gene editing?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent gene editing technology developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How would you describe current China-Taiwan relations?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'China-Taiwan relations current state'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What have researchers discovered about ocean plastic pollution lately?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest ocean plastic pollution findings'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the latest on North Korea's nuclear capabilities?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'North Korea nuclear program current situation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How has quantum computing progressed recently?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent quantum computing advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any updates on the global chip shortage?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global chip shortage latest news'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are the current patterns in remote work?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current remote work trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the Ethiopia-Tigray conflict evolving?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Ethiopia-Tigray conflict current status'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What progress has been made in fusion energy research?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest fusion energy research developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is global biodiversity faring at the moment?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global biodiversity current state'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Have there been any new discoveries about dark matter?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest dark matter findings'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's being done about the global semiconductor shortage?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global semiconductor shortage latest'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How are governments approaching social media regulation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current social media regulation trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the current state of the Afghan peace process?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Afghan peace process current status'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What advancements have been made in brain-computer interfaces?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest brain-computer interface developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which companies or countries are ahead in the quantum supremacy race?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current leaders quantum supremacy race'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How are global vaccination efforts progressing?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global vaccination efforts latest news'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What innovations have occurred in vertical farming recently?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent vertical farming technology developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How would you characterize current US-China trade relations?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'US-China trade relations current state'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What have scientists learned about microplastics in the food chain?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest microplastics in food chain findings'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How severe is the global water scarcity situation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global water scarcity current situation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What progress has been made in hydrogen fuel technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent hydrogen fuel technology advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the global minimum wage movement developing?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global minimum wage movement latest'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are the emerging trends in sustainable fashion?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current sustainable fashion trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Has there been any progress in the Israel-Palestine peace process?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Israel-Palestine peace process current status'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about advancements that been made in lab-grown meat technology.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest lab-grown meat technology developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any breakthroughs in Alzheimer's disease research?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': \"latest Alzheimer's disease research breakthroughs\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which countries are leading in renewable energy adoption?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'top countries in renewable energy adoption'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Has there been progress in nuclear fusion technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent nuclear fusion technology advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the current state of global food security?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global food security current situation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there new developments in cancer immunotherapy?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest cancer immunotherapy developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the global housing market performing?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current global housing market trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What progress has been made in desalination technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent desalination technology advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you update me on the Myanmar political situation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Myanmar political situation latest news'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are the newest trends in cybersecurity?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current cybersecurity trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Have there been advancements in carbon capture technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest carbon capture technology developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Is there news about the Artemis program's progress?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Artemis program latest updates'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the current status of global poverty rates?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global poverty rates current statistics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there new findings in antibiotic resistance research?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest antibiotic resistance research findings'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the global semiconductor industry evolving?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global semiconductor industry current trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's happening with the Belt and Road Initiative?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'Belt and Road Initiative latest developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Have there been breakthroughs in treating spinal cord injuries?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent spinal cord injury treatment breakthroughs'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the latest on artificial meat alternatives?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'artificial meat alternatives recent developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there updates on the global refugee crisis?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global refugee crisis current situation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What progress has been made in quantum cryptography?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent quantum cryptography advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How are countries addressing the aging population issue?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'aging population solutions current strategies'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's new in the field of nanotechnology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest nanotechnology developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you provide an update on global deforestation rates?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global deforestation rates current statistics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are the emerging trends in telemedicine?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'current telemedicine trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Has there been progress in treating neurodegenerative diseases?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent neurodegenerative disease treatment advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the current state of global income inequality?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global income inequality current statistics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there new developments in space debris removal?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest space debris removal technology'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the global electric vehicle market performing?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global electric vehicle market current trends'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What progress has been made in treating rare diseases?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent rare disease treatment advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you update me on the status of global arms control agreements?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global arms control agreements current status'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are the latest developments in smart city technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'recent smart city technology advancements'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Has there been progress in treating mental health disorders?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest mental health treatment developments'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the current state of global literacy rates?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global literacy rates current statistics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which NFL player racked up the most rushing yards in the 2021 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the top 3-point shooters in the NBA for 2023. Can you list them?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>During the 2022 NHL season, which goalie made the most saves?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you provide the batting averages for the Los Angeles Dodgers players in 2020?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2020', 'team': 'los angeles dodgers'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>In the 2019 MLS season, which player topped the assist charts?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2019', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List the sack leaders for the 2023 NFL season, please.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Among NBA players in 2021, who boasted the highest field goal percentage?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to see the goal-scoring statistics for the Pittsburgh Penguins in 2023.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2023', 'team': 'pittsburgh penguins'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which MLB player hit the most home runs in the 2022 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me a rundown of the top goal scorers in MLS for the 2020 season.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2020', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>In the 2024 NFL season, which player snagged the most interceptions?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you share the rebounding stats for the Golden State Warriors in their 2022 campaign?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2022', 'team': 'golden state warriors'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which NHL player spent the most time in the penalty box during the 2021 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in the MLB strikeout leaders for 2023. Could you provide that information?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which MLS goalkeeper recorded the most clean sheets in 2022?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Break down the receiving yards for the Kansas City Chiefs players in the 2023 season.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2023', 'team': 'kansas city chiefs'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was the shot-blocking king of the NBA during the 2024 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to see the plus-minus leaders in the NHL for the 2022 season, please.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Among MLB pitchers in 2021, who had the lowest ERA?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you provide the assist statistics for LAFC players in the 2023 MLS season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2023', 'team': 'lafc'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which NFL player made the most tackles during the 2022 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm looking for the three-point percentage leaders in the NBA for 2023. Can you help?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>In the 2024 NHL season, which player scored the most power-play goals?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Provide the stolen base statistics for the Atlanta Braves players in 2022.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2022', 'team': 'atlanta braves'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which MLS player received the most yellow cards during the 2021 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you list the NFL quarterbacks with the highest completion percentages in 2023?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>During the 2022 NBA season, which player had the best free throw percentage?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to see the shot-blocking stats for the Boston Bruins players in 2023.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2023', 'team': 'boston bruins'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which MLB player drove in the most runs (RBIs) during the 2024 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you provide a list of the top goal-scoring midfielders in MLS for 2022?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>In the 2021 NFL season, which player recovered the most fumbles?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in the assist totals for the Los Angeles Lakers players in 2024.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2024', 'team': 'los angeles lakers'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who were the top faceoff specialists in the NHL for the 2023 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which MLB pitchers threw the most complete games during the 2022 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you provide the save percentages for MLS goalkeepers in the 2021 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which NFL player accumulated the most yards after catch (YAC) in 2023?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know the defensive rebound leaders in the NBA for the 2022 season.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>During the 2024 NHL season, which player scored the most short-handed goals?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you provide the on-base percentage stats for the New York Yankees players in 2023?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2023', 'team': 'new york yankees'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who were the MLS players with the best assist-to-turnover ratios in 2022?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>In the 2021 NFL season, which player generated the most quarterback pressures?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the steal totals for the Miami Heat players in 2024. Can you share that?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2024', 'team': 'miami heat'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who were the ice time leaders in the NHL for the 2023 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which MLB players hit the most sacrifice flies during the 2022 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you provide the possession percentage stats for MLS teams in the 2021 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2021', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which NFL player made the most special teams tackles in 2023?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to see the true shooting percentage leaders in the NBA for the 2022 season.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>During the 2024 NHL season, which player scored the most game-winning goals?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you provide the WHIP stats for the Houston Astros pitchers in the 2023 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2023', 'team': 'houston astros'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who were the MLS players that covered the most distance on the field in 2022?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you break down the top 5 QBs by passing yards in the NFL's 2023 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the NBA's best free throw shooters in 2022. Mind sharing that info?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the NHL players with the most assists during the 2024 season.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Looking for the ERA leaders in MLB for 2023. Got any data on that?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me a rundown of the top goal scorers in the 2022 MLS season, please.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Any info on the NFL players with the most tackles for loss in 2024?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Let's talk about the NBA's block leaders for the 2023 season. What've you got?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd love to see the save percentages for NHL goalies in 2022. Can you help?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Do you have data on the MLB players with the most doubles in 2024?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Share the stats on MLS players with the highest passing accuracy in 2023, please.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How about the NFL's leaders in yards per catch for the 2022 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Got any info on the NBA players with the best plus-minus ratings in 2024?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Fill me in on the NHL's top penalty minute earners for the 2023 season.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in the MLB's stolen base leaders for 2022. What can you tell me?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Care to share the MLS players with the most shots on target in 2024?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Let's discuss the NFL quarterbacks with the lowest interception rates in 2023.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Mind running through the NBA's assist leaders for the 2022 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Curious about the NHL players with the highest shooting percentages in 2024.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Got any data on the MLB pitchers with the most strikeouts in 2023?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd appreciate info on the MLS defenders with the most interceptions in 2022.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you provide data on the NFL's leaders in punt return yardage for 2024?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Interested in learning about the NBA's offensive rebound leaders in 2023.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Care to share info on the NHL defensemen with the most points in 2022?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the MLB players with the highest on-base percentages in 2024.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm looking for data on MLS goalkeepers with the most clean sheets in 2023.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you provide info on the NFL players with the most forced fumbles in 2022?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Interested in the NBA players with the highest usage rates for the 2024 season.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Share some data on the NHL players with the most takeaways in 2023, please.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Got any info on the MLB players with the most walks drawn in 2022?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know about the MLS players with the highest tackle success rate in 2024.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2024', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me all customers who made purchases over $1000</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customers', 'condition': 'where purchase_amount > 1000'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me the top 5 bestselling books of the year</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'books', 'condition': 'order by sales DESC limit 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all employees who joined the company in 2022</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employees', 'condition': 'where YEAR(join_date) = 2022'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>ID the products with less than 10 items in stock</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'inventory', 'condition': 'where stock_quantity < 10'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all orders placed in the last 30 days</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'orders', 'condition': 'where order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find the top 3 highest-rated restaurants</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'restaurants', 'condition': 'order by rating DESC limit 3'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all projects with a budget over $1 million</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'projects', 'condition': 'where budget > 1000000'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me the students who scored above 90% in mathematics</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'student_scores', 'condition': \"where subject = 'mathematics' and score > 90\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all suppliers located in California</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'suppliers', 'condition': \"where state = 'California'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List the top 10 most viewed articles on the website</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'articles', 'condition': 'order by views DESC limit 10'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all transactions over $10,000 in the past week</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'transactions', 'condition': 'where amount > 10000 and transaction_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all users who have not logged in for the last 3 months</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'users', 'condition': 'where last_login < DATE_SUB(CURDATE(), INTERVAL 3 MONTH)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List the top 5 countries by number of Olympic medals</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'olympic_medals', 'condition': 'order by total_medals DESC limit 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all cars manufactured after 2020</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'vehicles', 'condition': 'where manufacture_year > 2020'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all employees who have been with the company for more than 10 years</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employees', 'condition': 'where DATEDIFF(CURDATE(), join_date) > 3650'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all products that are currently on sale</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'products', 'condition': 'where on_sale = TRUE'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me the top 10 highest-grossing movies of all time</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'movies', 'condition': 'order by box_office DESC limit 10'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all customers who have made more than 5 purchases</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customers', 'condition': 'where purchase_count > 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I require all flights departing tomorrow</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'flights', 'condition': 'where departure_date = DATE_ADD(CURDATE(), INTERVAL 1 DAY)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all books written by J.K. Rowling</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'books', 'condition': \"where author = 'J.K. Rowling'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find the top 5 cities with the highest population</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'cities', 'condition': 'order by population DESC limit 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all events scheduled for next month</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'events', 'condition': 'where YEAR(event_date) = YEAR(CURDATE()) and MONTH(event_date) = MONTH(DATE_ADD(CURDATE(), INTERVAL 1 MONTH))'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all employees who have not taken any sick leave this year</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employee_leave', 'condition': \"where YEAR(leave_date) = YEAR(CURDATE()) and leave_type = 'sick' group by employee_id having COUNT(*) = 0\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all products with a rating above 4.5 stars</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'products', 'condition': 'where rating > 4.5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List the top 3 salespeople by total sales amount</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'sales', 'condition': 'group by salesperson_id order by SUM(sale_amount) DESC limit 3'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all customers who have not made a purchase in the last 6 months</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customers', 'condition': 'where last_purchase_date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all apartments available for rent under $2000 per month</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'apartments', 'condition': \"where status = 'available' and monthly_rent < 2000\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all songs released in the 1980s</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'songs', 'condition': 'where release_year BETWEEN 1980 AND 1989'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me the top 5 most popular social media influencers</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'influencers', 'condition': 'order by follower_count DESC limit 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all patients who have had a heart surgery in the last year</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'medical_procedures', 'condition': \"where procedure_type = 'heart surgery' and procedure_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all employees who have not completed mandatory training</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employee_training', 'condition': \"where training_status != 'completed' and training_type = 'mandatory'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all orders that were delivered late</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'orders', 'condition': 'where actual_delivery_date > expected_delivery_date'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find the top 10 most expensive houses on the market</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'real_estate', 'condition': \"where status = 'for sale' order by price DESC limit 10\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all movies directed by Christopher Nolan</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'movies', 'condition': \"where director = 'Christopher Nolan'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all customers who have spent over $5000 in total</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customer_purchases', 'condition': 'group by customer_id having SUM(purchase_amount) > 5000'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all products that are out of stock</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'inventory', 'condition': 'where stock_quantity = 0'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List the top 5 most popular vacation destinations</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'travel_bookings', 'condition': 'group by destination order by COUNT(*) DESC limit 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all employees who have received a promotion in the last year</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employee_promotions', 'condition': 'where promotion_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all customers who have subscribed to our premium service</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'subscriptions', 'condition': \"where subscription_type = 'premium' and status = 'active'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all projects that are behind schedule</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'projects', 'condition': 'where actual_progress < expected_progress'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me the top 3 bestselling products in each category</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'product_sales', 'condition': 'group by category, product_id order by sales_count DESC limit 3'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all students who have a GPA above 3.5</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'students', 'condition': 'where gpa > 3.5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all events happening this weekend</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'events', 'condition': 'where event_date BETWEEN FRIDAY() AND SUNDAY()'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all customers who have left a negative review</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customer_reviews', 'condition': 'where rating < 3'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find the top 5 most frequently ordered items from our menu</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'order_items', 'condition': 'group by menu_item order by COUNT(*) DESC limit 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all employees who have worked overtime in the past month</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employee_hours', 'condition': 'where work_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) and hours_worked > 8'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all products launched in the last quarter</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'products', 'condition': 'where launch_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all customers who have not made a purchase in over a year</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customers', 'condition': 'where last_purchase_date < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List the top 10 most downloaded mobile apps</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'mobile_apps', 'condition': 'order by download_count DESC limit 10'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want all flights with available first-class seats</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'flights', 'condition': 'where first_class_seats_available > 0'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you retrieve all orders placed during the holiday season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'orders', 'condition': \"where order_date BETWEEN '2023-11-25' AND '2023-12-31'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which employees have perfect attendance this year?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employee_attendance', 'condition': 'where YEAR(date) = YEAR(CURDATE()) GROUP BY employee_id HAVING COUNT(*) = DAY(CURDATE())'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Identify the least profitable products in our inventory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'products', 'condition': 'ORDER BY profit_margin ASC LIMIT 10'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any customers who haven't renewed their subscription?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'subscriptions', 'condition': \"where renewal_date < CURDATE() AND status = 'expired'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Pull up a list of all organic products we offer</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'products', 'condition': 'where is_organic = TRUE'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How many projects are currently in the planning phase?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'projects', 'condition': \"where status = 'planning'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you show me all customer complaints filed this month?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customer_complaints', 'condition': 'where YEAR(complaint_date) = YEAR(CURDATE()) AND MONTH(complaint_date) = MONTH(CURDATE())'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Retrieve a list of employees eligible for retirement next year</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employees', 'condition': 'where YEAR(birth_date) = YEAR(CURDATE()) - 65'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which suppliers have we not ordered from in the last 6 months?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'supplier_orders', 'condition': 'where order_date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me the names of all customers who've referred a friend</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customer_referrals', 'condition': 'where referral_count > 0'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display the top-selling products in each region</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'sales', 'condition': 'GROUP BY region, product_id ORDER BY SUM(quantity) DESC'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Any events scheduled for International Women's Day?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'events', 'condition': \"where event_date = '2024-03-08' AND event_name LIKE '%Women%Day%'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Compile a list of all vegetarian menu items</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'menu_items', 'condition': 'where is_vegetarian = TRUE'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Have we received any customer feedback on our new product line?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customer_feedback', 'condition': \"where product_line = 'new_line' AND feedback_date >= '2023-01-01'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Generate a report of all overdue library books</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'library_loans', 'condition': 'where due_date < CURDATE() AND return_date IS NULL'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Do we have any employees celebrating work anniversaries this month?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employees', 'condition': 'where MONTH(hire_date) = MONTH(CURDATE()) AND DAY(hire_date) >= DAY(CURDATE())'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Identify all products with less than 5% profit margin</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'products', 'condition': 'where profit_margin < 0.05'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Compile a list of customers who've made purchases in all product categories</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customer_purchases', 'condition': 'GROUP BY customer_id HAVING COUNT(DISTINCT category) = (SELECT COUNT(DISTINCT category) FROM products)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any recurring meetings scheduled for next week?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'meetings', 'condition': 'where meeting_date BETWEEN DATE_ADD(CURDATE(), INTERVAL 1 WEEK) AND DATE_ADD(CURDATE(), INTERVAL 2 WEEK) AND is_recurring = TRUE'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Pull up all unresolved customer support tickets</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'support_tickets', 'condition': \"where status != 'resolved'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which departments have exceeded their budget this quarter?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'department_expenses', 'condition': 'where QUARTER(expense_date) = QUARTER(CURDATE()) GROUP BY department_id HAVING SUM(amount) > budget_limit'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Retrieve a list of all premium members who joined in the last 30 days</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'members', 'condition': \"where membership_type = 'premium' AND join_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me the most popular dishes ordered for delivery</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'food_orders', 'condition': \"where order_type = 'delivery' GROUP BY dish_id ORDER BY COUNT(*) DESC LIMIT 5\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Identify any duplicate entries in our customer database</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customers', 'condition': 'GROUP BY email HAVING COUNT(*) > 1'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all properties that have been on the market for over 6 months</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'real_estate_listings', 'condition': \"where list_date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND status = 'for sale'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Compile a report of all late shipments from last month</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'shipments', 'condition': 'where YEAR(ship_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND MONTH(ship_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND actual_delivery_date > expected_delivery_date'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find any courses with less than 5 students enrolled</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'course_enrollments', 'condition': 'GROUP BY course_id HAVING COUNT(student_id) < 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me a breakdown of sales by product category for Q1</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'sales', 'condition': 'where QUARTER(sale_date) = 1 GROUP BY product_category'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Identify all employees who haven't used their vacation days this year</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employee_leave', 'condition': \"where YEAR(leave_date) = YEAR(CURDATE()) GROUP BY employee_id HAVING SUM(CASE WHEN leave_type = 'vacation' THEN 1 ELSE 0 END) = 0\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List any products that have received consistently negative reviews</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'product_reviews', 'condition': 'GROUP BY product_id HAVING AVG(rating) < 2'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
