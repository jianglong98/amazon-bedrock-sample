{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Execute this run.py script with an argparse arg adding two gpus</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['python run.py --gpus 2']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Run the following Python code script.py located two folders levels higher</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['python ../../script.py']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all files in the directory one step higher</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['ls ..']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Upgrade the requests library using pip</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['pip install --upgrade requests']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Extract files from archive.zip</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['unzip archive.zip']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Display all currently mounted filesystems and their usage</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['df -h']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all symbolic links in the /etc directory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find /etc -type l']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Stop all running Docker containers and remove all unused volumes</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['docker stop $(docker ps -q) && docker volume prune -f']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all open ports and the processes using them</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['sudo lsof -i -P -n | grep LISTEN']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a new Docker network named 'mynetwork' with subnet 172.18.0.0/16</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['docker network create --subnet=172.18.0.0/16 mynetwork']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all files larger than 50MB, excluding hidden files, and display their sizes in human-readable format</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find . -type f -size +50M ! -path \"*/.*\" -exec ls -lh {} + | sort -k5 -rh']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Create a tar archive of /home/user, excluding the Downloads directory in a file called user_backup</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['tar --exclude=\"/home/user/Downloads\" -czvf user_backup.tar.gz /home/user']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show the last 50 lines of system.log and update in real-time</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['tail -n 50 -f /var/log/system.log']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all Python files modified in the last 7 days and copy them to a 'recent' directory</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find . -name \"*.py\" -mtime -7 -exec cp {} recent/ \\\\;']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all log files in /var/log directory that contain the word 'error', then zip them into an archive named 'error_logs.zip'</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':terminal, 'parameters':{'commands': ['find /var/log -type f -name \"*.log\" -exec grep -l \"error\" {} + | xargs zip error_logs.zip']}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who is Bill Clinton?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'bill clinton'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the capital of France?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'capital of france'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>When was the Declaration of Independence signed?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'declaration of independence'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the theory of relativity</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'theory of relativity'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the Renaissance?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'Renaissance'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the history of chocolate?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of chocolate'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the Mayan civilization</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'mayan civilization'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Nikola Tesla?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'nikola tesla'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the process of mummification in ancient Egypt</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'mummification in egypt'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the history of coffee?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of coffee'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the Hubble Space Telescope</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'hubble space telescope'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was Ada Lovelace?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'ada lovelace'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Explain the concept of neural networks</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'neural networks'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the history of the samurai in Japan?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'history of samurai'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Tell me about the Great Barrier Reef</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':wikipedia, 'parameters':{'query': 'great barrier reef'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find me Yannic Kilcher videos</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'yannic kilcher'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show popular TED talks on artificial intelligence</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'ted talks artificial intelligence'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Search for cooking tutorials</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'cooking tutorials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find the latest music videos from Taylor Swift</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'taylor swift music videos'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me popular stand-up comedy clips</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'stand-up comedy clips'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find YouTube videos about traditional Indian cuisine?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'traditional indian cuisine'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm interested in learning about deep sea creatures. What videos are available?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'deep sea creatures'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good tutorials on oil painting techniques?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'oil painting techniques'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find videos explaining the basics of astrophysics?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'astrophysics basics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to watch content about ancient Mayan civilization. What's available?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'ancient mayan civilization'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any informative videos about the art of bonsai cultivation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'bonsai cultivation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find YouTube tutorials on advanced chess strategies?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'advanced chess strategies'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What kind of videos are available about sustainable architecture?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'sustainable architecture'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I want to learn about the history of perfume making. Can you find relevant content?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'history of perfume making'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any good videos explaining the principles of permaculture?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':youtube_search, 'parameters':{'query': 'principles of permaculture'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find me articles on breast cancer</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'breast cancer'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Search for recent studies on COVID-19 vaccines</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'covid vaccines'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Look up research on the effects of meditation on stress</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'effect meditation stress'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find clinical trials for Alzheimer's disease treatments</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'alzheimer clinical trials'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Search for studies on artificial intelligence in healthcare</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'artificial intelligence healthcare'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research is available on the effects of music therapy for autism spectrum disorders?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'music therapy effects autism'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find studies on the impact of shift work on circadian rhythms?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'shift work impact circadian rhythm'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there any recent articles on the use of exoskeletons in stroke rehabilitation?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'exoskeleton stroke rehabilitation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What does research say about the effectiveness of light therapy for seasonal affective disorder?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'light therapy seasonal affective disorder'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find articles on the use of 3D bioprinting in tissue engineering?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': '3D bioprinting tissue'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What research exists on the impact of microplastics on human health?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'microplastics impact health'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there studies examining the effectiveness of neurofeedback for ADHD treatment?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'neurofeedback adhd treatment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about the potential of CRISPR technology in agricultural applications. Any studies on this?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'crispr agricultural application'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know more about the potential of psychedelic-assisted therapy in mental health treatment. Any research available?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'psychedelic-assisted therapy'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What does research say about the impact of e-cigarettes on respiratory health?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':pubmed_search, 'parameters':{'query': 'e-cigarettes respiratory health'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who is the richest person in the world?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'richest person world'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who is leading medals in the Paris Summer Olympics?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'leading medals paris olympics'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find me the latest langgraph documentation.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'latest langgraph documentation'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the stock market doing today?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'stock market today'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find tips for growing tomatoes</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'growing tomatoes'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are the latest advancements in augmented reality technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'augmented reality'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the global honey bee population faring?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global honey bee population'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find me holistic cures for poison ivy?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'holistic cure poison ivy'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How are countries addressing rising sea levels?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'rising sea level'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What are the newest developments in 3D printing technology?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': '3D printing advancement'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the global coffee industry adapting to climate change?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'coffee industry climate change adapt'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the current state of global internet connectivity?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'global internet connectivity'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Are there new developments in veterinary medicine?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'veterinary medicine'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the global shipping industry addressing environmental concerns?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'shipping industry environment'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What progress has been made in developing lab-grown organs?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':duckduckgo_results_json, 'parameters':{'query': 'lab-grown organs'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you find me stats on quarterbacks in 2022?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who was the leading scorer in the NBA in 2020?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2020', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who led the New York Rangers in assists in 2023?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2023', 'team': 'new york rangers'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Give me 2018's top 5 leaders in ERA</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2018', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who is the NY Red Bulls leading scorer in 2021</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2021', 'team': 'new york red bulls'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who had the most rushing touchdowns for the bengals in 2017 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '2017', 'team': 'cincinnati bengals'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you show me the top 5 three-point shooters for the Chicago Bulls in 2023?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2023', 'team': 'chicago bulls'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which Panthers player had the most assists in the 2024 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2024', 'team': 'florida panthers'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who led the reds in saves during the 1999 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '1999', 'team': 'cincinnati reds'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'm curious about galaxy player with the most successful dribbles in 2023. Can you help?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2023', 'team': 'los angeles galaxy'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Which NFL team had the highest total offense in yards for the 1986 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nfl', 'year': '1986', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Could you provide the assist-to-turnover ratios for the Brooklyn Nets players in 2020?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nba', 'year': '2020', 'team': 'brooklyn nets'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Who were the top 3 rookies on the ice during the 2023 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'nhl', 'year': '2023', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I'd like to know about the brewers players with the highest slugging percentages in 2024.</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mlb', 'year': '2024', 'team': 'milwaukee brewers'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Can you show me the MLS teams with the best goal difference in the 2022 season?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':stat_pull, 'parameters':{'league': 'mls', 'year': '2022', 'team': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Get me the top 5 highest cost projects from the budget table</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'budget', 'condition': 'order by cost desc limit 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find me all the male employees making over 200k from the employee database</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'employees', 'condition': \"where gender = 'male' and salary > 200000\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>I need the top 10 products by sales in the electronics category</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'products', 'condition': \"where category = 'electronics'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>We need the biggest three customers by volume</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'customers', 'condition': 'order by volume DESC limit 3'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find the departments with less than 20 employees</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'departments', 'condition': 'where employees < 20'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all blog posts with more than 1000 views and at least 50 comments</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'blog_posts', 'condition': 'where views > 1000 AND comment_count >= 50'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Identify users who have been inactive for more than 6 months</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'users', 'condition': 'where last_login < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me the top 5 donors who have contributed the most this year in our system</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'donations', 'condition': 'where YEAR(donation_date) = YEAR(CURDATE()) ORDER BY amount DESC LIMIT 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all apartments with rent under $1000 and at least 2 bedrooms in the db</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'apartments', 'condition': 'where monthly_rent < 1000 AND bedrooms >= 2'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all patients who have had more than 3 appointments in the last month</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'appointments', 'condition': 'where appointment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY patient_id HAVING COUNT(*) > 3'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List all concerts happening in outdoor venues from the concerts db</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'concerts', 'condition': \"where venue_type = 'outdoor'\"}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Show me all recipes that are both vegan and gluten-free in my collection</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'recipes', 'condition': 'where is_vegan = TRUE AND is_gluten_free = TRUE'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find the top 3 most borrowed books from the books table this year</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'books', 'condition': 'where YEAR(loan_date) = YEAR(CURDATE()) GROUP BY book_id ORDER BY COUNT(*) DESC LIMIT 3'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Find all vehicles with a fuel efficiency over 40 mpg in our set</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'vehicles', 'condition': 'where fuel_efficiency > 40'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>List the top 5 cities with the highest average property prices in our real_estate</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':text_to_sql, 'parameters':{'table': 'real_estate', 'condition': 'GROUP BY city ORDER BY AVG(price) DESC LIMIT 5'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the weather at the reds stadium by the river?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'cincinnati', 'country': 'usa', 'state': 'ohio', 'county': 'hamilton county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What's the weather at the nfl hall of fame?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'canton', 'country': 'usa', 'state': 'ohio', 'county': 'canton county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Is it raining in culver city by the studios?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'culver city', 'country': 'usa', 'state': 'california', 'county': 'los angeles county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the temperature at the Santa Fe Opera?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'santa fe', 'country': 'usa', 'state': 'new mexico', 'county': 'santa fe county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the forecast for bandon dunes golf course?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'bandon', 'country': 'usa', 'state': 'oregon', 'county': 'coos county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Is it going to be overcast in Plitvice Lakes?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'plitvicka jezera', 'country': 'croatia', 'state': 'none', 'county': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Will the weather be good to visit the Nazca lines?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'nazca', 'country': 'peru', 'state': 'none', 'county': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the weather by Dollywood?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'pigeon forge', 'country': 'usa', 'state': 'tennessee', 'county': 'sevier county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Will it be raining when I visit Jean Lafitte's Old Absinthe House?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'new orleans', 'country': 'usa', 'state': 'louisiana', 'county': 'orleans county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>If I visit the Winchester Mystery House will it be raining there?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'san jose', 'country': 'usa', 'state': 'california', 'county': 'santa clara county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>What is the temperature at Thor's Well?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'yachats', 'country': 'usa', 'state': 'oregon', 'county': 'lincoln county'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Do you think the weather will be nice at Table Mountain and Hout Bay?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'cape town', 'country': 'south africa', 'state': 'none', 'county': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>How is the climate at Isola Bella right now?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'taormina', 'country': 'italy', 'state': 'none', 'county': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Is the weather good for visiting the national bonsai museum?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'washington dc', 'country': 'usa', 'state': 'district of columbia', 'county': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
{"system": [{"text": "You are a bot that can handle different requests with tools."}], "messages": [{"role": "user", "content": [{"text": "\nGiven the following functions within <tools>, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.\nRespond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.Do not use variables. Donot give any explanations. \nONLY output the resulting JSON structure and nothing else.Donot use the word 'json' anywhere in the result.\n\n<tools>{\n  \"tools\": [\n    {\n      \"toolSpec\": {\n        \"name\": \"weather_api_call\",\n        \"description\": \"Get the current weather for a given location\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"city\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant city for the API call\"\n              },\n              \"country\": {\n                \"type\": \"string\",\n                \"description\": \"The country for the API call\"\n              },\n              \"state\": {\n                \"type\": \"string\",\n                \"description\": \"The state for the API call, is none for international locations\"\n              },\n              \"county\": {\n                \"type\": \"string\",\n                \"description\": \"The county for the API call, is none for international locations\"\n              }\n            },\n            \"required\": [\n              \"city\",\n              \"country\",\n              \"state\",\n              \"county\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"stat_pull\",\n        \"description\": \"Get the stats of a team\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"league\": {\n                \"type\": \"string\",\n                \"description\": \"The US sports league the stat is associated with, e.g. NFL, NBA, NHL, MLB\"\n              },\n              \"year\": {\n                \"type\": \"string\",\n                \"description\": \"The year the stats are associated with\"\n              },\n              \"team\": {\n                \"type\": \"string\",\n                \"description\": \"A specific team the stats are associated with, e.g. Cincinnati Bengals, if no team, specify None\"\n              }\n            },\n            \"required\": [\n              \"league\",\n              \"year\",\n              \"team\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"terminal\",\n        \"description\": \"Run shell commands on this MacOS machine \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"commands\": {\n                \"type\": \"string\",\n                \"description\": \"TList of shell commands to run. Deserialized using json.loads\"\n              }\n            },\n            \"required\": [\n              \"commands\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"text_to_sql\",\n        \"description\": \"Tool for creating a SQL query. Pull the relevant table and any conditions used \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"table\": {\n                \"type\": \"string\",\n                \"description\": \"The relevant table to pull data from\"\n              },\n              \"condition\": {\n                \"type\": \"string\",\n                \"description\": \"a condition like: where salary > 200\"\n              }\n            },\n            \"required\": [\n              \"table\",\n              \"condition\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"wikipedia\",\n        \"description\": \" A wrapper around Wikipedia. Useful for when you need to answer general questions about people, places, companies, facts, historical events, or other subjects. Input should be a search query.  \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"query to look up on wikipedia\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"youtube_search\",\n        \"description\": \" search for youtube videos associated with a person. the input to this tool should be a comma separated list, the first part contains a person name and the second a number that is the maximum number of video results to return aka num_results. the second part is optional\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"youtube search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"pubmed_search\",\n        \"description\": \"  A wrapper around PubMed. Useful for when you need to answer questions about medicine, health, and biomedical topics from biomedical literature, MEDLINE, life science journals, and online books. Input should be a search query.\",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"pubmed search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"toolSpec\": {\n        \"name\": \"duckduckgo_results_json\",\n        \"description\": \" A wrapper around Duck Duck Go Search. Useful for when you need to answer questions about current events. Input should be a search query. Output is a JSON string array of the query results \",\n        \"inputSchema\": {\n          \"json\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"query\": {\n                \"type\": \"string\",\n                \"description\": \"internet search query to look up\"\n              }\n            },\n            \"required\": [\n              \"query\"\n            ]\n          }\n        }\n      }\n    }\n  ]\n}</tools>\n\nGenerate answer for the following question.\n<question>Will the weather be good to visit Jigokudani Monkey Park?</question>\n"}]}, {"role": "assistant", "content": [{"text": "{'name':weather_api_call, 'parameters':{'city': 'yamanouchi', 'country': 'japan', 'state': 'none', 'county': 'none'}}"}]}], "schemaVersion": "tooluse-dataset-2024"}
